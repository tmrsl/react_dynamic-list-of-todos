{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","sortBy","handleChange","event","target","name","value","setState","this","props","todos","selectedUserId","onSelect","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","htmlFor","type","onChange","placeholder","map","classNames","checked","readOnly","userId","onClick","id","React","Component","BASE_URL","CurrentUser","user","loadData","prevProps","a","fetch","then","response","json","onClear","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63f7be27.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  onSelect: (userId: number) => void;\n};\n\ntype State = {\n  query: string,\n  sortBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    sortBy: 'all',\n  };\n\n  handleChange = (\n    event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, 'query' | 'sortBy'>);\n  };\n\n  render() {\n    const { todos, selectedUserId, onSelect } = this.props;\n    const { query, sortBy } = this.state;\n\n    const filteredTodos = todos\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title !== null\n            && todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        if (sortBy === 'active') {\n          return !todo.completed;\n        }\n\n        if (sortBy === 'completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <label htmlFor=\"query\">\n            <input\n              type=\"text\"\n              name=\"query\"\n              value={query}\n              onChange={this.handleChange}\n              placeholder=\"Search by title\"\n            />\n          </label>\n\n          <select\n            name=\"sortBy\"\n            value={sortBy}\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                  },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label htmlFor=\"todoStatus\">\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelect(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId:number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport { getUsers } from '../../api/api';\nimport { User } from '../../react-app-env';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  onClear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUsers(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onClear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n\n            <p className=\"CurrentUser__email\">{user.email}</p>\n\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              className=\"CurrentUser__clear button\"\n              type=\"button\"\n              onClick={onClear}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { Todo } from './react-app-env';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  onSelect = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  onClear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  async loadData() {\n    this.setState({ todos: await getTodos() });\n  }\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            selectedUserId={this.state.selectedUserId}\n            onSelect={this.onSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClear={this.onClear} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}